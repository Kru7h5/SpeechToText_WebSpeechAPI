{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red157\green0\blue210;\red255\green255\blue254;\red0\green0\blue0;
\red0\green0\blue255;\red32\green108\blue135;\red101\green76\blue29;\red0\green0\blue109;\red144\green1\blue18;
\red19\green120\blue72;}
{\*\expandedcolortbl;;\cssrgb\c68627\c0\c85882;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c100000;\cssrgb\c14902\c49804\c60000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;\cssrgb\c63922\c8235\c8235;
\cssrgb\c3529\c53333\c35294;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  tensorflow \cf2 \strokec2 as\cf4 \strokec4  tf\cb1 \
\
\pard\pardeftab720\sl380\partightenfactor0
\cf5 \cb3 \strokec5 class\cf4 \strokec4  \cf6 \strokec6 myCallback\cf4 \strokec4 (\cf6 \strokec6 tf\cf4 \strokec4 .\cf6 \strokec6 keras\cf4 \strokec4 .\cf6 \strokec6 callbacks\cf4 \strokec4 .\cf6 \strokec6 Callback\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl380\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 def\cf4 \strokec4  \cf7 \strokec7 on_epoch_end\cf4 \strokec4 (\cf8 \strokec8 self\cf4 \strokec4 , \cf8 \strokec8 epoch\cf4 \strokec4 , \cf8 \strokec8 logs\cf5 \strokec5 =\cf4 \strokec4 \{\}):\cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4 (logs.get(\cf9 \strokec9 'accuracy'\cf4 \strokec4 )>\cf10 \strokec10 0.88\cf4 \strokec4 ):\cb1 \
\cb3       \cf7 \strokec7 print\cf4 \strokec4 (\cf9 \strokec9 "\\nReached 60% accuracy so cancelling training!"\cf4 \strokec4 )\cb1 \
\cb3       \cf8 \strokec8 self\cf4 \strokec4 .model.stop_training = \cf5 \strokec5 True\cf4 \cb1 \strokec4 \
\
\cb3 mnist = tf.keras.datasets.fashion_mnist\cb1 \
\
\cb3 (x_train, y_train),(x_test, y_test) = mnist.load_data()\cb1 \
\cb3 x_train, x_test = x_train / \cf10 \strokec10 255.0\cf4 \strokec4 , x_test / \cf10 \strokec10 255.0\cf4 \cb1 \strokec4 \
\
\cb3 callbacks = myCallback()\cb1 \
\
\cb3 model = tf.keras.models.Sequential([\cb1 \
\cb3   tf.keras.layers.Flatten(input_shape=(\cf10 \strokec10 28\cf4 \strokec4 , \cf10 \strokec10 28\cf4 \strokec4 )),\cb1 \
\cb3   tf.keras.layers.Dense(\cf10 \strokec10 512\cf4 \strokec4 , activation=tf.nn.relu),\cb1 \
\cb3   tf.keras.layers.Dense(\cf10 \strokec10 10\cf4 \strokec4 , activation=tf.nn.softmax)\cb1 \
\cb3 ])\cb1 \
\cb3 model.\cf7 \strokec7 compile\cf4 \strokec4 (optimizer=tf.optimizers.Adam(),\cb1 \
\cb3               loss=\cf9 \strokec9 'sparse_categorical_crossentropy'\cf4 \strokec4 ,\cb1 \
\cb3               metrics=[\cf9 \strokec9 'accuracy'\cf4 \strokec4 ])\cb1 \
\
\cb3 model.fit(x_train, y_train, epochs=\cf10 \strokec10 10\cf4 \strokec4 , callbacks=[callbacks])\cb1 \
}